adi@MacBook-Pro-2 156_project % /usr/bin/python3 /Users/adi/Downloads/projects/156_project/adi_new_large.py
/Users/adi/Library/Python/3.9/lib/python/site-packages/urllib3/__init__.py:35: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL
/Users/adi/Library/Python/3.9/lib/python/site-packages/urllib3/__init__.py:35: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020
  warnings.warn(
Loading clean dataset...
Splitting into train/val/test... for model saving name: adi_dec4

Dataset splits:
Training:   4,999 examples
Validation: 556 examples
Test:       618 examples

Running with less regularization:
{
  "learning_rate": 0.0002,
  "weight_decay": 0.0001,
  "epochs": 30,
  "patience": 7,
  "l1_lambda": 0,
  "clip_grad": null,
  "batch_size": 32,
  "hidden_sizes": [
    1024,
    512,
    1024
  ],
  "dropout_rates": [
    0.2,
    0.1,
    0.2
  ]
}
Training on: mps
/Users/adi/Library/Python/3.9/lib/python/site-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is depre
/Users/adi/Library/Python/3.9/lib/python/site-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.
  warnings.warn(

Epoch 1/30
--------------------------------------------------
Train Loss:    2.8354
Val Loss:      0.6842
Within 25%:    10.4%
Within 50%:    23.7%
Accuracy:      51.1%
Precision:     60.7%
Recall:        6.1%
F1 Score:      11.1
--------------------------------------------------

Epoch 1
Train Loss: 2.8354
Val Loss:   0.6842
Saved new best model and updated JSON!

Epoch 2/30
--------------------------------------------------
Train Loss:    0.4039
Val Loss:      0.4548
Within 25%:    11.2%
Within 50%:    27.5%
Accuracy:      51.1%
Precision:     54.7%
Recall:        12.6%
F1 Score:      20.5
--------------------------------------------------

Epoch 2
Train Loss: 0.4039
Val Loss:   0.4548
Saved new best model and updated JSON!

Epoch 3/30
--------------------------------------------------
Train Loss:    0.3471
Val Loss:      0.3375
Within 25%:    16.2%
Within 50%:    34.0%
Accuracy:      53.2%
Precision:     58.0%
Recall:        23.4%
F1 Score:      33.3
--------------------------------------------------

Epoch 3
Train Loss: 0.3471
Val Loss:   0.3375
Saved new best model and updated JSON!

Epoch 4/30
--------------------------------------------------
Train Loss:    0.2979
Val Loss:      0.3784
Within 25%:    18.0%
Within 50%:    34.0%
Accuracy:      56.3%
Precision:     70.6%
Recall:        21.6%
F1 Score:      33.1
--------------------------------------------------

Epoch 5/30
--------------------------------------------------
Train Loss:    0.2749
Val Loss:      0.2759
Within 25%:    12.9%
Within 50%:    30.8%
Accuracy:      54.3%
Precision:     53.0%
Recall:        75.5%
F1 Score:      62.3
--------------------------------------------------

Sample Predictions:
--------------------------------------------------
Example 1:
Predicted: $5,492
Actual:    $3,204
Error:     71.4%
--------------------------------------------------
Example 2:
Predicted: $1,649
Actual:    $2,783
Error:     40.7%
--------------------------------------------------
Example 3:
Predicted: $2,963
Actual:    $1,687
Error:     75.6%
--------------------------------------------------
Example 4:
Predicted: $3,494
Actual:    $5,192
Error:     32.7%
--------------------------------------------------
Example 5:
Predicted: $2,759
Actual:    $2,183
Error:     26.4%
--------------------------------------------------

Epoch 5
Train Loss: 0.2749
Val Loss:   0.2759
Saved new best model and updated JSON!

Epoch 6/30
--------------------------------------------------
Train Loss:    0.2456
Val Loss:      0.3576
Within 25%:    16.7%
Within 50%:    35.6%
Accuracy:      55.6%
Precision:     71.8%
Recall:        18.3%
F1 Score:      29.2
--------------------------------------------------

Epoch 7/30
--------------------------------------------------
Train Loss:    0.2502
Val Loss:      0.2509
Within 25%:    18.0%
Within 50%:    33.5%
Accuracy:      53.2%
Precision:     52.3%
Recall:        74.1%
F1 Score:      61.3
--------------------------------------------------

Epoch 7
Train Loss: 0.2502
Val Loss:   0.2509
Saved new best model and updated JSON!

Epoch 8/30
--------------------------------------------------
Train Loss:    0.2574
Val Loss:      0.4917
Within 25%:    14.4%
Within 50%:    29.5%
Accuracy:      51.1%
Precision:     87.5%
Recall:        2.5%
F1 Score:      4.9
--------------------------------------------------

Epoch 9/30
--------------------------------------------------
Train Loss:    0.2319
Val Loss:      0.3899
Within 25%:    12.6%
Within 50%:    30.2%
Accuracy:      54.0%
Precision:     65.7%
Recall:        16.5%
F1 Score:      26.4
--------------------------------------------------

Epoch 10/30
--------------------------------------------------
Train Loss:    0.2221
Val Loss:      0.2358
Within 25%:    19.6%
Within 50%:    36.5%
Accuracy:      55.2%
Precision:     54.4%
Recall:        64.0%
F1 Score:      58.8
--------------------------------------------------

Sample Predictions:
--------------------------------------------------
Example 1:
Predicted: $3,609
Actual:    $3,204
Error:     12.6%
--------------------------------------------------
Example 2:
Predicted: $2,140
Actual:    $2,783
Error:     23.1%
--------------------------------------------------
Example 3:
Predicted: $2,095
Actual:    $1,687
Error:     24.2%
--------------------------------------------------
Example 4:
Predicted: $2,148
Actual:    $5,192
Error:     58.6%
--------------------------------------------------
Example 5:
Predicted: $2,431
Actual:    $2,183
Error:     11.4%
--------------------------------------------------

Epoch 10
Train Loss: 0.2221
Val Loss:   0.2358
Saved new best model and updated JSON!

Epoch 11/30
--------------------------------------------------
Train Loss:    0.2484
Val Loss:      0.3802
Within 25%:    15.5%
Within 50%:    32.7%
Accuracy:      52.2%
Precision:     63.6%
Recall:        10.1%
F1 Score:      17.4
--------------------------------------------------

Epoch 12/30
--------------------------------------------------
Train Loss:    0.2244
Val Loss:      0.7525
Within 25%:    8.3%
Within 50%:    18.7%
Accuracy:      50.7%
Precision:     100.0%
Recall:        1.4%
F1 Score:      2.8
--------------------------------------------------

Epoch 13/30
--------------------------------------------------
Train Loss:    0.1975
Val Loss:      0.2908
Within 25%:    17.4%
Within 50%:    37.6%
Accuracy:      53.8%
Precision:     57.7%
Recall:        28.4%
F1 Score:      38.1
--------------------------------------------------

Epoch 14/30
--------------------------------------------------
Train Loss:    0.1739
Val Loss:      0.3243
Within 25%:    14.4%
Within 50%:    33.8%
Accuracy:      52.7%
Precision:     64.7%
Recall:        11.9%
F1 Score:      20.1
--------------------------------------------------

Epoch 15/30
--------------------------------------------------
Train Loss:    0.1563
Val Loss:      0.2887
Within 25%:    16.0%
Within 50%:    38.3%
Accuracy:      55.2%
Precision:     65.6%
Recall:        21.9%
F1 Score:      32.9
--------------------------------------------------

Sample Predictions:
--------------------------------------------------
Example 1:
Predicted: $3,094
Actual:    $3,204
Error:     3.4%
--------------------------------------------------
Example 2:
Predicted: $1,263
Actual:    $2,783
Error:     54.6%
--------------------------------------------------
Example 3:
Predicted: $1,900
Actual:    $1,687
Error:     12.6%
--------------------------------------------------
Example 4:
Predicted: $2,145
Actual:    $5,192
Error:     58.7%
--------------------------------------------------
Example 5:
Predicted: $1,708
Actual:    $2,183
Error:     21.8%
--------------------------------------------------

Epoch 16/30
--------------------------------------------------
Train Loss:    0.1544
Val Loss:      0.2274
Within 25%:    17.6%
Within 50%:    36.7%
Accuracy:      57.2%
Precision:     57.8%
Recall:        53.6%
F1 Score:      55.6
--------------------------------------------------

Epoch 16
Train Loss: 0.1544
Val Loss:   0.2274
Saved new best model and updated JSON!

Epoch 17/30
--------------------------------------------------
Train Loss:    0.1589
Val Loss:      0.5080
Within 25%:    14.0%
Within 50%:    30.4%
Accuracy:      50.7%
Precision:     75.0%
Recall:        2.2%
F1 Score:      4.2
--------------------------------------------------

Epoch 18/30
--------------------------------------------------
Train Loss:    0.1417
Val Loss:      0.3666
Within 25%:    16.5%
Within 50%:    34.9%
Accuracy:      52.7%
Precision:     70.3%
Recall:        9.4%
F1 Score:      16.5
--------------------------------------------------

Epoch 19/30
--------------------------------------------------
Train Loss:    0.1471
Val Loss:      0.2446
Within 25%:    15.6%
Within 50%:    35.6%
Accuracy:      56.7%
Precision:     59.6%
Recall:        41.4%
F1 Score:      48.8
--------------------------------------------------

Epoch 20/30
--------------------------------------------------
Train Loss:    0.1413
Val Loss:      0.3993
Within 25%:    17.4%
Within 50%:    30.6%
Accuracy:      53.8%
Precision:     80.0%
Recall:        10.1%
F1 Score:      17.9
--------------------------------------------------

Sample Predictions:
--------------------------------------------------
Example 1:
Predicted: $2,486
Actual:    $3,204
Error:     22.4%
--------------------------------------------------
Example 2:
Predicted: $1,357
Actual:    $2,783
Error:     51.2%
--------------------------------------------------
Example 3:
Predicted: $1,442
Actual:    $1,687
Error:     14.5%
--------------------------------------------------
Example 4:
Predicted: $1,749
Actual:    $5,192
Error:     66.3%
--------------------------------------------------
Example 5:
Predicted: $1,615
Actual:    $2,183
Error:     26.0%
--------------------------------------------------

Epoch 21/30
--------------------------------------------------
Train Loss:    0.1184
Val Loss:      0.6447
Within 25%:    10.1%
Within 50%:    24.6%
Accuracy:      50.2%
Precision:     100.0%
Recall:        0.4%
F1 Score:      0.7
--------------------------------------------------

Epoch 22/30
--------------------------------------------------
Train Loss:    0.1223
Val Loss:      0.4515
Within 25%:    15.3%
Within 50%:    29.3%
Accuracy:      51.4%
Precision:     75.0%
Recall:        4.3%
F1 Score:      8.2
--------------------------------------------------

Epoch 23/30
--------------------------------------------------
Train Loss:    0.1123
Val Loss:      0.3205
Within 25%:    14.9%
Within 50%:    33.8%
Accuracy:      53.6%
Precision:     68.5%
Recall:        13.3%
F1 Score:      22.3
--------------------------------------------------

Early stopping triggered!
/Users/adi/Downloads/projects/156_project/adi_new_large.py:383: FutureWarning: You are using `torch.load` with `weights_only=False
/Users/adi/Downloads/projects/156_project/adi_new_large.py:383: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data 
/Users/adi/Downloads/projects/156_project/adi_new_large.py:383: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models
/Users/adi/Downloads/projects/156_project/adi_new_large.py:383: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions
/Users/adi/Downloads/projects/156_project/adi_new_large.py:383: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are 
/Users/adi/Downloads/projects/156_project/adi_new_large.py:383: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` 
/Users/adi/Downloads/projects/156_project/adi_new_large.py:383: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to th
/Users/adi/Downloads/projects/156_project/adi_new_large.py:383: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f'{FOLDER_NAME}/{MODEL_NAME}.pth'))

Evaluating on test set...

Test Set Metrics:
--------------------------------------------------
Test Loss:     0.2399
Within 25%:    17.8%
Within 50%:    35.6%
Accuracy:      57.8%
Precision:     57.8%
Recall:        57.3%
F1 Score:      57.6
--------------------------------------------------

Final Results:
==================================================
Best Validation Loss: 0.2274

Test Metrics:
test_loss      : 0.2399
within_25      : 17.8%
within_50      : 35.6%
accuracy       : 57.8%
precision      : 57.8%
recall         : 57.3%
f1_score       : 57.6%
==================================================

Results saved to: adi_large_models/final_results_adi_dec4.json